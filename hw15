//task1
class Marker {
  constructor(color, inkAmount) {
    this.color = color;
    this.inkAmount = inkAmount;
  }

  print(text) {
    let printedText = '';
    for (const symbol of text) {
      if (this.inkAmount <= 0) {
        console.log(`Insufficient ink to print.`);
        break;
      }
      if (symbol !== ' ') {
        this.inkAmount -= 0.5;
      }
      printedText += symbol;
    }

    console.log(`Color: ${this.color}. Text: ${printedText}`);
  }

  refill(percentage) {
    this.inkAmount = Math.min(100, this.inkAmount + percentage);
    console.log(`Ink refilled. Ink level: ${this.inkAmount}%`);
  }
}

const myMarker = new Marker('Blue', 10);
myMarker.print("Hello world! How are you? Today is a good day.");
myMarker.refill(100);
myMarker.print("Hello world! How are you? Today is a good day.");

//task2
class Circle {
  #radius;

  constructor(radius) {
    this.#radius = radius;
  }

  get radius() {
    return this.#radius;
  }

  set radius(newRadius) {
    this.#radius = newRadius;
  }

  get diameter() {
    return this.#radius * 2;
  }

  calculateArea() {
    return Math.PI * this.#radius * this.#radius;
  }

  calculateCircumference() {
    return 2 * Math.PI * this.#radius;
  }
}


const circle = new Circle(5);
console.log(`Радіус: ${circle.radius}`); // Виведе радіус
console.log(`Діаметр: ${circle.diameter}`); // Виведе діаметр


console.log(`Площа кола: ${circle.calculateArea().toFixed(2)}`);

console.log(`Довжина кола: ${circle.calculateCircumference().toFixed(2)}`);


circle.radius = 10;
console.log(`Новий радіус: ${circle.radius}`);
console.log(`Нова площа кола: ${circle.calculateArea().toFixed(2)}`);
console.log(`Нова довжина кола: ${circle.calculateCircumference().toFixed(2)}`);


//task 3
class Battery {
  constructor(type, capacity, chargeLevel) {
    this.type = type;
    this.capacity = capacity;
    this.chargeLevel = chargeLevel;
  }

  recharge(amount) {
    this.chargeLevel = Math.min(100, this.chargeLevel + amount);
    console.log(`Battery charged to ${this.chargeLevel}%`);
  }
}

class Table {
  constructor(material, length, width, height) {
    this.material = material;
    this.length = length;
    this.width = width;
    this.height = height;
    this.hasDrawers = false;
  }
}

class Door {
  constructor(material, color, isOpen) {
    this.material = material;
    this.color = color;
    this.isOpen = isOpen;
  }

  open() {
    this.isOpen = true;
    console.log("Door opened");
  }

  close() {
    this.isOpen = false;
    console.log("Door closed");
  }
}

class AirConditioner {
  constructor(brand, model, power, energyClass, temperature) {
    this.brand = brand;
    this.model = model;
    this.power = power;
    this.energyClass = energyClass;
    this.temperature = temperature;
    this.isOn = false;
  }

  turnOn() {
    this.isOn = true;
    console.log("Air conditioner turned on");
  }

  turnOff() {
    this.isOn = false;
    console.log("Air conditioner turned off");
  }

  setTemperature(temp) {
    this.temperature = temp;
    console.log(`Temperature set to ${temp}°C`);
  }

  displayInfo() {
    console.log(`Air conditioner ${this.brand} ${this.model}, power: ${this.power} kW, energy class: ${this.energyClass}, current temperature: ${this.temperature}°C, status: ${this.isOn ? 'on' : 'off'}`);
  }
}
